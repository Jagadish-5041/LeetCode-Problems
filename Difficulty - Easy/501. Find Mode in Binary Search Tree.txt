Problem Link : https://leetcode.com/problems/find-mode-in-binary-search-tree/description/

Solution in Python :

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution(object):

    def __init__(self):
        self.maximum_frequency = 0

    def depth_first_search_function(self , root , dictionary):

        if(not root):
            return
        
        node_value = root.val

        dictionary[node_value] = (dictionary.get(node_value , 0) + 1)

        self.maximum_frequency = max(self.maximum_frequency , dictionary[node_value])

        self.depth_first_search_function(root.left , dictionary)

        self.depth_first_search_function(root.right , dictionary)
    
    def findMode(self , root):

        """
        :type root: TreeNode
        :rtype: List[int]
        """

        dictionary = {}

        self.depth_first_search_function(root , dictionary)

        return [key for key in dictionary if(dictionary[key] == self.maximum_frequency)]