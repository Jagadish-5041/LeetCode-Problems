Problem Link : https://leetcode.com/problems/range-sum-of-bst/description/

Solution in Python :

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:

    def depth_first_search(self , root_node , starting_range , ending_range):

        if(not root_node):
            return 0

        left_subtree_sum = self.depth_first_search(root_node.left , starting_range , ending_range)

        right_subtree_sum = self.depth_first_search(root_node.right , starting_range , ending_range)

        current_sum_value = (root_node.val) if(starting_range <= root_node.val <= ending_range) else (0)

        current_sum_value += (left_subtree_sum + right_subtree_sum)

        return current_sum_value
    
    def rangeSumBST(self , root_node : Optional[TreeNode] , starting_range : int , ending_range : int) -> int:

        return self.depth_first_search(root_node , starting_range , ending_range)