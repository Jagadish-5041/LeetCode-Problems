Problem Link : https://leetcode.com/problems/min-cost-climbing-stairs/description/

Solution in Python :

class Solution:

    def depth_first_search_function(self , index , N , costs_list , dp_dictionary):

        if(index >= N):
            return 0
        
        if(index in dp_dictionary):
            return dp_dictionary[index]
        
        one_step = (costs_list[index] + (self.depth_first_search_function((index + 1) , N , costs_list , dp_dictionary)))

        two_steps = (costs_list[index] + (self.depth_first_search_function((index + 2) , N , costs_list , dp_dictionary)))

        dp_dictionary[index] = min(one_step , two_steps)

        return dp_dictionary[index]

    def minCostClimbingStairs(self , costs_list : List[int]) -> int:

        N = len(costs_list)

        dp_dictionary = {}

        cost_of_starting_from_0_th_index = self.depth_first_search_function(0 , N , costs_list , dp_dictionary)

        cost_of_starting_from_1_st_index = self.depth_first_search_function(1 , N , costs_list , dp_dictionary)

        return min(cost_of_starting_from_0_th_index , cost_of_starting_from_1_st_index)