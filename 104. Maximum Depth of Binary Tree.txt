Problem Link : https://leetcode.com/problems/maximum-depth-of-binary-tree/description/

Solution in Python : 

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:

    def breadth_first_search(self , root_node):

        if(not root_node):
            return 0

        depth = 0

        queue = [root_node]

        while(queue):

            for i in range(0 , len(queue)):

                current_node = queue.pop(0)

                if(current_node.left):
                    queue.append(current_node.left)
                
                if(current_node.right):
                    queue.append(current_node.right)
            
            depth += 1
        
        return depth

    def depth_first_search(self , root_node):

        if(not root_node):
            return 0

        current_depth = 1

        left_subtree_depth = self.depth_first_search(root_node.left)

        right_subtree_depth = self.depth_first_search(root_node.right)

        maximum_subtree_depth = max(left_subtree_depth , right_subtree_depth)

        return (current_depth + maximum_subtree_depth)

    def maxDepth(self , root_node : Optional[TreeNode]) -> int:

        return self.breadth_first_search(root_node)